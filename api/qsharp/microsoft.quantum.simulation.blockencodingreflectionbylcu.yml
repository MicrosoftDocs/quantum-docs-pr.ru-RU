### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingreflectionbylcu
name: BlockEncodingReflectionByLCU
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  Кодирует интересующий оператор в `BlockEncodingReflection`.


  Создается `BlockEncodingReflection` единая $U = П\кдот В\кдот P ^ \дагжер $, которая кодирует некоторый оператор $H = \sum_{j} | \alpha_j | U_j $, представляющая собой линейное сочетание унитариес. Как правило, $P $ — это единое средство подготовки, например $P \кет{0}\_a\sum_j\sqrt {\ alpha_j/\|\век\алфа\|\_2} \кет{ж}\_a $ и $V = \sum_{j}\ket{j}\bra{j}\_а\отимес U_ j $.
remarks: Эта `BlockEncoding` реализация предоставляет свойства `BlockEncodingReflection`.
syntax: 'function BlockEncodingReflectionByLCU (statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl)) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
input:
  content: '(statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl))'
  types:
  - name: statePreparation
    summary: Единое $P $, которое готовит конечное состояние.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: selector
    summary: Единое $V $, которое кодирует компонент унитариес $H $.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: Единая $U $, взаимодействующая с регистрами `a` и `s`, которые блок-кодировки $H $, и соответствует $U "^{-1} = U $.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: a092068a61d860074ace150b0c7872eb064a63b9
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73219167"
