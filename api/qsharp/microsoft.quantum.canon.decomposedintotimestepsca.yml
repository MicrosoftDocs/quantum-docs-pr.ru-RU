### YamlMime:QSharpType
uid: microsoft.quantum.canon.decomposedintotimestepsca
name: DecomposedIntoTimeStepsCA
type: function
namespace: Microsoft.Quantum.Canon
summary: Возвращает операцию, реализующую интегратор Троттер – Сузуки для данной операции.
remarks: >-
  При вызове с `order`, равным `1`, эта функция возвращает операцию, которая может быть смоделирована с помощью самого низкого порядка Троттер – Сузуки Integrator $ $ \бегин{алигн} S_1 (\ламбда) = \ prod_ {j = 1} ^ {m} e ^ {H_j \ламбда}, \енд{алигн} $ $, где мы простроили нотацию [Куант-pH/0508139](https://arxiv.org/abs/quant-ph/0508139) и добавим $ \ламбда $ в качестве времени эволюции (представленного первым входом возвращаемой операции), и поставьте параметр let $\{H_j\}_ {j = 1} ^ {m} $ как интегрированный набор (асимметри-хермитиан) динамических генераторов, таких как Этот `op(j, lambda, _)` имитируется оператором $e ^ {H_j \ламбда} $.


  Аналогичным образом `order` `2` возвращает "внутренний" симметричный Троттер – Сузуки Integrator $ $ \бегин{алигн} S_2 (\ламбда) = \ prod_ {j = 1} ^ {m} e ^ {H_k \ламбда/2} \ prod_ {j ' = m} ^{1} e ^ {H_ {j '} \ламбда/2}.

  \енд{алигн} $ $


  Более высокие значения `order` реализуются с помощью рекурсивного создания [Куант-pH/0508139](https://arxiv.org/abs/quant-ph/0508139).
syntax: "function DecomposedIntoTimeStepsCA ((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int) : ((Double, 'T) => Unit is Adj + Ctl)"
references: '- [*D. W. Берри, G. Ахокас, R. Cleve, B. C. Сандерс*](https://arxiv.org/abs/quant-ph/0508139)'
input:
  content: "((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int)"
  types:
  - name: nSteps
    summary: Количество операций, которые необходимо отложить на временные шаги.
    isPrimitive: true
    uid: Int
  - name: op
    summary: Операция, которая принимает входные данные индекса (тип `Int`) и входные данные времени (тип `Double`) для декомпозиции.
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Int
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: trotterOrder
    summary: >-
      Выбирает порядок использования Троттер – Сузуки Integrator.

      Порядок 1 и даже заказы 2, 4, 6,... в настоящее время поддерживаются.
    isPrimitive: true
    uid: Int
output:
  content: ((Double, 'T) => Unit is Adj + Ctl)
  types:
  - summary: Возвращает неединую реализацию интегратора Троттер – Сузуки, где первый параметр `Double` — это размер шага интеграции, а второй параметр — это целевой объект.
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
typeParameters:
- uid: "'T"
  summary: Тип, с которым должен действовать каждый шаг времени; обычно либо `Qubit[]`, либо `Qubit`.
metadata:
  ms.openlocfilehash: 66b2d7ca6394f525e8ec0dcb3516776bf91bd0cb
  ms.sourcegitcommit: ca5015fed409eaf0395a89c2e4bc6a890c360aa2
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 01/29/2020
  ms.locfileid: "76873028"
