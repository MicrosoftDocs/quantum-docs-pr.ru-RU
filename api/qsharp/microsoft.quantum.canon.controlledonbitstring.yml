### YamlMime:QSharpType
uid: microsoft.quantum.canon.controlledonbitstring
name: ControlledOnBitString
type: function
namespace: Microsoft.Quantum.Canon
summary: >-
  Возвращает единую операцию, которая применяет Oracle к целевой регистрации, если состояние регистра элемента управления соответствует заданной битовой маске.


  Выходными данными этой функции является операция, которая может быть представлена единым преобразованием $U $ таким, что \бегин{алигн} U \кет{b_0 b_1 \кдотс b_ {n-1}} \кет{\пси} = \кет{b_0 b_1 \кдотс b_ {n-1}} \отимес \бегин{Касес} V \кет{\пси} & \textrm{if} (b_0 b_1 \cdots b_ {n-1}) = \texttt{BITS} \\\\ \ket{\psi} & \textrm{otherwise} \end{cases} \end{align}, где $V $ является единым преобразованием, представляющим действие `oracle` операции.
remarks: >-
  Длина `bits` и `controlRegister` должна быть равна.


  При указании логического `bits` массива и `oracle`операции результат этой функции является операцией, которая выполняет следующие действия:


  * Примените операцию `X` к каждому кубит регистру элемента управления, соответствующему `false` элементу `bits`;

  * Примените `Controlled oracle` к элементу управления и целевым регистрам.

  * Примените операцию `X` к каждому кубит регистру элемента управления, который соответствует `false`ному элементу `bits` еще раз, чтобы вернуть Контрольный регистр к исходному состоянию.


  Выходные данные `Controlled` функтор — это особый случай `ControlledOnBitString`, где `bits` равно `[true, ..., true]`.
examples: >-
  Следующие фрагменты кода эквивалентны:


  ```qsharp

  (ControlledOnBitString(bits, oracle))(controlRegister, targetRegister);

  ```


  и


  ```qsharp

  within {
      ApplyPauliFromBitString(PauliX, false, bits, controlRegister);
  } apply {
      Controlled oracle(controlRegister, targetRegister);
  }

  ```


  Следующий код подготавливает параметр state $ \фрак{1}{2}(\кет{00}-\кет{01} + \кет{10} + \кет{11}) $:


  ```qsharp

  using (register = Qubit[2]) {
      ApplyToEach(H, register);
      (ControlledOnBitString([false], Z))(register[0..0], register[1]);
  }

  ```
syntax: "function ControlledOnBitString (bits : Bool[], oracle : ('T => Unit is Adj + Ctl)) : ((Qubit[], 'T) => Unit is Adj + Ctl)"
input:
  content: "(bits : Bool[], oracle : ('T => Unit is Adj + Ctl))"
  types:
  - name: bits
    summary: Битовая строка для управления данной единой операцией в.
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: oracle
    summary: Единая операция, применяемая к целевому регистру.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: ((Qubit[], 'T) => Unit is Adj + Ctl)
  types:
  - summary: Единая операция, которая применяет `oracle` к целевой регистрации, если контрольное состояние регистра соответствует битовой маске `bits`.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: e6f7f8980b2b9b8305df12da41e30fc563e54ad1
  ms.sourcegitcommit: 6ccea4a2006a47569c4e2c2cb37001e132f17476
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 02/28/2020
  ms.locfileid: "77906531"
