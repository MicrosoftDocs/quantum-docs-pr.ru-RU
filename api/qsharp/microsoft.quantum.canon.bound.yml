### YamlMime:QSharpType
uid: microsoft.quantum.canon.bound
name: Bound
type: function
namespace: Microsoft.Quantum.Canon
summary: При наличии массива операций, исдействующих один вход, создает новую операцию, которая выполняет каждую заданную операцию последовательно.
examples: >-
  Следующие эквивалентны:


  ```qsharp

  let bound = Bound([U, V]);

  bound(x);

  ```


  Azure и


  ```qsharp

  U(x); V(x);

  ```
syntax: "function Bound (operations : ('T => Unit)[]) : ('T => Unit)"
input:
  content: "(operations : ('T => Unit)[])"
  types:
  - name: operations
    summary: Последовательность операций, выполняемых с заданным входом.
    isArray: true
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
output:
  content: ('T => Unit)
  types:
  - summary: Новая операция, которая выполняет каждую заданную операцию последовательно по входным данным.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
typeParameters:
- uid: "'T"
  summary: Целевой объект, на котором выполняется каждая операция в массиве.
seeAlso:
- microsoft.quantum.canon.boundc
- microsoft.quantum.canon.bounda
- microsoft.quantum.canon.boundca
ms.openlocfilehash: 67cb4cb93c5d306491bfce83caf1c112194991be
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 10/31/2019
ms.locfileid: "73220646"
