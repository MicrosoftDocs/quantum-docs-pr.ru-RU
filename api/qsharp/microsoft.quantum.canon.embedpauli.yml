### YamlMime:QSharpType
uid: microsoft.quantum.canon.embedpauli
name: EmbedPauli
type: function
namespace: Microsoft.Quantum.Canon
summary: При наличии однокубитного оператора Паули и индекса кубит возвращает оператор Multi-кубит Паули с заданным оператором Single-кубит в этом индексе и `PauliI` по каждому индексу.
examples: >-
  Чтобы получить `[PauliI, PauliI, PauliX, PauliI]`массива, сделайте следующее:


  ```qsharp

  EmbedPauli(PauliX, 2, 3);

  ```
syntax: 'function EmbedPauli (pauli : Pauli, location : Int, n : Int) : Pauli[]'
input:
  content: '(pauli : Pauli, location : Int, n : Int)'
  types:
  - name: pauli
    summary: Оператор кубит Паули, помещаемый в заданное место.
    isPrimitive: true
    uid: Pauli
  - name: location
    summary: Индекс, `output[location] == pauli`, где `output` является выходом этой функции.
    isPrimitive: true
    uid: Int
  - name: n
    summary: Длина возвращаемого массива.
    isPrimitive: true
    uid: Int
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
metadata:
  ms.openlocfilehash: 1e852781f6dd85e5432f5613184f028db0e84b87
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73219388"
