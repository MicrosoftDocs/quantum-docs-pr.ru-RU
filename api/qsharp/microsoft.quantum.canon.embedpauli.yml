### YamlMime:QSharpType
uid: microsoft.quantum.canon.embedpauli
name: EmbedPauli
type: function
namespace: microsoft.quantum.canon
summary: При наличии однокубитного оператора Паули и индекса кубит возвращает оператор Multi-кубит Паули с заданным оператором Single-кубит в этом индексе и `PauliI` в каждом другом индексе.
examples: >-
  Чтобы получить массив, `[PauliI, PauliI, PauliX, PauliI]` сделайте следующее:


  ```qsharp

  EmbedPauli(PauliX, 2, 3);

  ```
syntax: 'function EmbedPauli (pauli : Pauli, location : Int, n : Int) : Pauli[]'
input:
  content: '(pauli : Pauli, location : Int, n : Int)'
  types:
  - name: pauli
    summary: Оператор кубит Паули, помещаемый в заданное место.
    isPrimitive: true
    uid: Pauli
  - name: location
    summary: Индекс `output[location] == pauli` , где `output` — это выходные данные этой функции.
    isPrimitive: true
    uid: Int
  - name: n
    summary: Длина возвращаемого массива.
    isPrimitive: true
    uid: Int
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
metadata:
  ms.openlocfilehash: 3e9ea0a6e566c76524e2d7b8ee87ab0ba784b754
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91471377"
