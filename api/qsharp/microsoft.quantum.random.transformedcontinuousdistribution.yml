### YamlMime:QSharpType
uid: microsoft.quantum.random.transformedcontinuousdistribution
name: TransformedContinuousDistribution
type: function
namespace: microsoft.quantum.random
summary: При наличии непрерывного распределения возвращает новое распределение, которое преобразует оригинал с помощью заданной функции.
examples: >-
  Следующие два распределения идентичны:


  ```Q#

  let dist1 = ContinuousUniformDistribution(1.0, 2.0);

  let dist2 = TransformedContinuousDistribution(
      PlusD(1.0, _),
      ContinuousUniformDistribution(0.0, 1.0)
  );

  ```
syntax: 'function TransformedContinuousDistribution (transform : (Double -> Double), distribution : Microsoft.Quantum.Random.ContinuousDistribution) : Microsoft.Quantum.Random.ContinuousDistribution'
input:
  content: '(transform : (Double -> Double), distribution : Microsoft.Quantum.Random.ContinuousDistribution)'
  types:
  - name: transform
    summary: Функция, которая преобразует вариатес исходного распределения в преобразованное распределение.
    isFunction: true
    input:
      types:
      - isPrimitive: true
        uid: Double
    output:
      types:
      - isPrimitive: true
        uid: Double
  - name: distribution
    summary: Исходное распределение для преобразования.
    uid: microsoft.quantum.random.continuousdistribution
output:
  content: Microsoft.Quantum.Random.ContinuousDistribution
  types:
  - summary: Новое распределение, относящееся к `distribution` преобразованию, заданному параметром `transform` .
    uid: microsoft.quantum.random.continuousdistribution
metadata:
  ms.openlocfilehash: 515cb4bd06fe5dd4d6c3c5dae9f7d51d616be5fb
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89330656"
