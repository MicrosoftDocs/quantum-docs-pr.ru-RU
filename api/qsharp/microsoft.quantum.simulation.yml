### YamlMime:QSharpNamespace
functions:
- summary: Добавляет две `GeneratorSystem` s для создания нового `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.AddGeneratorSystems
- summary: >-
    Кодирует интересующий оператор в `BlockEncoding` .

    Создается `BlockEncoding` единая $U = П\кдот В\кдот P ^ \дагжер $, которая кодирует некоторый оператор $H = \ sum_ {j} | \ alpha_j | U_j $, представляющая собой линейное сочетание унитариес. Как правило, $P $ является подготовкой состояния, таким, что $P \кет {0} \_ a = \ sum_j \скрт{\ alpha_j/ \| \век\алфа \| \_ 2} \кет{ж} \_ a $ и $V = \ sum_ {j} \кет{ж}\бра{ж} \_ а\отимес U_j $.
  uid: Microsoft.Quantum.Simulation.BlockEncodingByLCU
- summary: >-
    Кодирует интересующий оператор в `BlockEncodingReflection` .

    Создается `BlockEncodingReflection` единая $U = П\кдот В\кдот P ^ \дагжер $, которая кодирует некоторый оператор $H = \ sum_ {j} | \ alpha_j | U_j $, представляющая собой линейное сочетание унитариес. Как правило, $P $ является подготовкой состояния, таким, что $P \кет {0} \_ a \ sum_j alpha_j \скрт{\/ \| \век\алфа \| \_ 2} \кет{ж} \_ a $ и $V = \ sum_ {j} \кет{ж}\бра{ж} \_ а\отимес U_j $.
  uid: Microsoft.Quantum.Simulation.BlockEncodingReflectionByLCU
- summary: >-
    Преобразует `BlockEncoding` в эквивалентный `BLockEncodingReflection` .

    То есть, учитывая `BlockEncoding` единое $U $, которое кодирует некоторый оператор $H $ of, преобразует его в `BlockEncodingReflection` $U "$, который кодирует тот же оператор, но также удовлетворяет $U" ^ \Дагжер = U "$. Это увеличивает размер дополнительного регистра $U $ на один кубит.
  uid: Microsoft.Quantum.Simulation.BlockEncodingToReflection
- summary: Извлекает `GeneratorIndex` функцию в `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.GetGeneratorSystemFunction
- summary: Извлекает количество терминов в `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.GetGeneratorSystemNTerms
- summary: Возвращает индекс генератора, совместимый с нулевым Хамилтониан, `H = 0` который соответствует операции эволюции идентификаторов.
  uid: Microsoft.Quantum.Simulation.IdentityGeneratorIndex
- summary: Возвращает систему генератора, совместимую с нулевым Хамилтониан `H = 0` , которая соответствует операции эволюции идентификаторов.
  uid: Microsoft.Quantum.Simulation.IdentityGeneratorSystem
- summary: Возвращает систему генератора, зависящую от времени, в соответствии с Хамилтониан `H(s) = 0` .
  uid: Microsoft.Quantum.Simulation.IdentityTimeDependentGeneratorSystem
- summary: Используется в реализации `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.IdxToCoeff
- summary: Используется в реализации `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.IdxToUnitary
- summary: Преобразует целое число в один кубит Паули оператор.
  uid: Microsoft.Quantum.Simulation.IntToPauli
- summary: Возвращает значение, `TimeDependentGeneratorSystem` представляющее линейную интерполяцию между двумя `GeneratorSystem` s.
  uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystems
- summary: Линейная интерполяция между двумя в `GeneratorSystems` соответствии с параметром расписания `s` от 0 до 1 (включительно).
  uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystemsImpl
- summary: Выполняет интерполяцию между двумя генераторами с единым расписанием, возвращая операцию, которая применяет смоделированное развитие в рамках генератора, зависящего от времени, к кубит регистру.
  uid: Microsoft.Quantum.Simulation.InterpolatedEvolution
- summary: Преобразует массив целых чисел в массив однокубитных операторов Паули.
  uid: Microsoft.Quantum.Simulation.IntsToPaulis
- summary: Умножает коэффициент в `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.MultiplyGeneratorIndex
- summary: Умножает коэффициент всех терминов в `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.MultiplyGeneratorSystem
- summary: >-
    Создает единое блочное кодирование для Хамилтониан.

    Хамилтониан $H = \ sum_ {j} \ alpha_j P_j $ описывается суммой Паулиных терминов $P _j $, каждый с действительным коэффициентом $ \ alpha_j $.
  uid: Microsoft.Quantum.Simulation.PauliBlockEncoding
- summary: Извлекает коэффициент Паули термина, описываемого `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.PauliCoefficientFromGenIdx
- summary: Представляет динамический генератор как набор моделирующих шлюзов и расширение на основе Паули.
  uid: Microsoft.Quantum.Simulation.PauliEvolutionFunction
- summary: Представляет динамический генератор как набор моделирующих шлюзов и расширение на основе Паули.
  uid: Microsoft.Quantum.Simulation.PauliEvolutionSet
- summary: Используется в реализации `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.PauliLCUUnitary
- summary: Извлекает строку Паули и ее индексы кубит для термина Паули, описанного в `GeneratorIndex` .
  uid: Microsoft.Quantum.Simulation.PauliStringFromGenIdx
- summary: Преобразует отражение кодирования блока в проход такта.
  uid: Microsoft.Quantum.Simulation.QuantumWalkByQubitization
- summary: Добавляет несколько объектов `GeneratorSystem` для создания нового женераторсистем.
  uid: Microsoft.Quantum.Simulation.SumGeneratorSystems
- summary: '`TimeDependentSimulationAlgorithm` функция, использующая декомпозицию Троттер – Сузуки для приближения единого оператора, который решает, зависящее от времени Счродинжер уравнение.'
  uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithm
- summary: '`SimulationAlgorithm` функция, использующая декомпозицию Троттер – Сузуки для приближения оператора времени _(-ИХТ)_ .'
  uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithm
- summary: Реализует однократный шаг за пределом времени с помощью системы, описанной в `EvolutionGenerator` с использованием декомпозиции Троттер – Сузуки.
  uid: Microsoft.Quantum.Simulation.TrotterStep
- summary: Добавляет две `GeneratorSystem` s для создания нового `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation._AddGeneratorSystems
- summary: Возвращает систему генератора, совместимую с Хамилтониан `H(s) = 0` , где `s` — параметр расписания.
  uid: Microsoft.Quantum.Simulation._IdentityTimeDependentGeneratorSystem
- summary: Умножает коэффициент всех терминов в `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation._MultiplyGeneratorSystem
- summary: >-
    Создает единое блочное кодирование для Хамилтониан.

    Хамилтониан $H = \ sum_ {j} \ alpha_j P_j $ описывается суммой Паулиных терминов $P _j $, каждый с действительным коэффициентом $ \ alpha_j $.
  uid: Microsoft.Quantum.Simulation._PauliBlockEncoding
name: Microsoft.Quantum.Simulation
newtypes:
- summary: >-
    Представляет собой единое место кодирования произвольного оператора в верхнем левом блоке.

    То есть, `BlockEncoding` представляет собой единое $U $, где произвольный оператор $H $, который действует на системный регистр, `s` кодируется в верхнем левом блоке, соответствующем вспомогательному состоянию $ \кет {0} _A $. То есть $ $ \бегин{алигн} (\бра {0} _A \отимес I_s) U (\кет {0} _a \отимес I_s) = H \енд{алигн} $ $.
  uid: Microsoft.Quantum.Simulation.BlockEncoding
- summary: Представляет объект `BlockEncoding` , который также является отражением.
  uid: Microsoft.Quantum.Simulation.BlockEncodingReflection
- summary: >-
    Представляет динамический генератор в виде набора моделирующих шлюзов и расширения с точки зрения этого базиса.

    Последний параметр для числа терминов.
  uid: Microsoft.Quantum.Simulation.EvolutionGenerator
- summary: >-
    Представляет динамический генератор, зависящий от времени.

    `Double`Параметр — это расписание в $ [0, 1] $.
  uid: Microsoft.Quantum.Simulation.EvolutionSchedule
- summary: >-
    Представляет набор шлюзов, которые можно легко реализовать и использовать для реализации алгоритмов моделирования.

    Элементы в наборе индексируются по  <xref:microsoft.quantum.simulation.generatorindex> , а каждый набор описывается функцией из `GeneratorIndex` в  <xref:microsoft.quantum.simulation.evolutionunitary> , что представляет собой операции, параметризованные вещественным числом, представляющим время.
  uid: Microsoft.Quantum.Simulation.EvolutionSet
- summary: >-
    Представляет отдельный оператор времени развития.

    Первый параметр — это длительность развития времени, а второй параметр — кубит регистр, который зависит от единой.
  uid: Microsoft.Quantum.Simulation.EvolutionUnitary
- summary: >-
    Представляет один примитивный термин в наборе всех динамических генераторов, например операторы Хермитиан, для которых существует соответствие от этого генератора до времени развития этого генератора с помощью `EvolutionSet` .

    Первый элемент (int [], double []) — это индексы, в которых один термин — например, Паули строка КСКСИ с коэффициентом 0,5 будет индексироваться по ([1, 1, 2], [0,5]). Кроме того, Хамилтонианс, параметризованный с помощью непрерывной переменной, например X cos φ + Y Sin φ, может представлять экземпляр ([], [φ]). Второй элемент индексирует подсистему, в которой работает генератор.
  uid: Microsoft.Quantum.Simulation.GeneratorIndex
- summary: >-
    Представляет коллекцию `GeneratorIndex` ES.

    Мы перебираем эту коллекцию с помощью целого числа с одним индексом, и размер коллекции считается известным.
  uid: Microsoft.Quantum.Simulation.GeneratorSystem
- summary: >-
    Представляет алгоритм моделирования, не зависящий от времени.

    Метод имитации, не зависящий от времени, преобразует преобразование <xref:microsoft.quantum.simulation.evolutiongenerator> в единое время в течение некоторого интервала времени.
  uid: Microsoft.Quantum.Simulation.SimulationAlgorithm
- summary: >-
    Представляет объект `BlockEncoding` , который управляется регистром часов.

    То есть, `TimeDependentBlockEncoding` представляет собой единое $U $, управляемое состоянием $ \кет{к} _d $ в регистре часов `d` таким образом, что произвольный оператор $H _k $ of, который действует на системный регистр, `s` кодируется в верхнем левом блоке, соответствующем вспомогательному состоянию $ \кет {0} _a $. То есть $ $ \бегин{алигн} (\бра {0} \_ а\отимес i_ {DS}) U (\кет {0} \_ а\отимес i_ {DS}) = \ sum_ {k} \кет{к}\бра{к} \_ д\отимес H_k. \енд{алигн} $ $.
  uid: Microsoft.Quantum.Simulation.TimeDependentBlockEncoding
- summary: Представляет зависящий от времени динамический генератор в качестве функции от времени до значения динамического генератора в это время.
  uid: Microsoft.Quantum.Simulation.TimeDependentGeneratorSystem
- summary: >-
    Представляет алгоритм моделирования, зависящий от времени.

    При моделировании, зависящем от времени, <xref:microsoft.quantum.simulation.evolutionschedule> в течение некоторого интервала времени преобразуются в единое время.
  uid: Microsoft.Quantum.Simulation.TimeDependentSimulationAlgorithm
- summary: Представляет развитие по единому оператору.
  uid: Microsoft.Quantum.Simulation.Unitary
operations:
- summary: Выполняет подготовку состояния, применяя к `statePrepUnitary` входному состоянию, за которым следует подготовка состояния адиабатик с помощью `adiabaticUnitary` , и, наконец, Оценка этапа с учетом `qpeUnitary` состояния с помощью `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.AdiabaticStateEnergyUnitary
- summary: Реализация метода `BlockEncodingToReflection`.
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingAsReflection
- summary: Реализация метода `BlockEncodingByLCU`.
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingByLCU
- summary: Преобразование ((Литтлиндиан, кубит []) => () является суммой и CTL) на Блоккенкодинг
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingFromBEandQubit
- summary: Используется в реализации `PauliBlockEncoding`
  uid: Microsoft.Quantum.Simulation.ApplyPauliLCUUnitary
- summary: Реализация метода `Qubitization`.
  uid: Microsoft.Quantum.Simulation.ApplyQuantumWalkByQubitization
- summary: Выполняет подготовку состояния, применяя к `statePrepUnitary` выводимой оценке этапа входного состояния по отношению к `qpeUnitary` результирующему состоянию с помощью `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.EstimateEnergy
- summary: Выполняет подготовку состояния, применяя к `statePrepUnitary` автоматически выделенному входному состоянию, за которым следует подготовка состояния адиабатик с помощью `adiabaticUnitary` , и, наконец, Оценка этапа по отношению к `qpeUnitary` результирующему состоянию с помощью `phaseEstAlgorithm` .
  uid: Microsoft.Quantum.Simulation.EstimateEnergyWithAdiabaticEvolution
- summary: >-
    Представляет динамический генератор как набор моделирующих шлюзов и расширение на основе Паули.

    Дополнительные сведения см. в разделе [динамическое моделирование генератора](/quantum/libraries/data-structures#dynamical-generator-modeling) .
  uid: Microsoft.Quantum.Simulation.PauliEvolutionImpl
- summary: Реализация нескольких Троттер шагов для приблизительного оператора, который решает Шредингер формулу, зависящую от времени.
  uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithmImpl
- summary: Выполняет повторяющиеся вызовы для `TrotterStep` приблизительного оператора времени ожидания ( _-ИХТ_ ).
  uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithmImpl
- summary: Реализует развитие времени с помощью термина, содержащегося в `GeneratorSystem` .
  uid: Microsoft.Quantum.Simulation.TrotterStepImpl
summary: Это пространство имен содержит функции и операции для согласованной имитации Dynamics тактовых систем.
uid: Microsoft.Quantum.Simulation
metadata:
  ms.openlocfilehash: dd1c6fe3baab8788047020bbe3d5dbe2888dec45
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92734233"
